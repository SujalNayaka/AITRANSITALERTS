Build a complete full-stack AI web application called “AI-Transit Alerts”.

🎯 Goal

Create an interactive, real-time AI-powered public transport monitoring system that detects and counts people using the webcam (YOLOv8), tracks vehicles via GPS on a map, analyzes ticketing data, and displays everything on a live dashboard with alerts for overcrowding.

🧠 Functional Requirements

Webcam Crowd Detection

Access the webcam through the browser (WebRTC).

Connect to a Python backend running YOLOv8 (Ultralytics) to detect people in real time.

Display bounding boxes and live count on the video stream.

GPS Tracking

Simulate or read live GPS coordinates for buses/trains.

Display the vehicles on a map (Leaflet.js or Google Maps API).

Color-code vehicles by crowd level (🟢 normal, 🟡 medium, 🔴 overcrowded).

Ticketing Data Simulation

Load a local CSV/JSON dataset (Kaggle-style) with passenger counts per route and time.

Plot interactive graphs (Chart.js or Recharts) for passenger trends.

Dashboard & Alerts

Real-time dashboard page showing:

Live passenger count (from YOLO)

Crowd density per vehicle

GPS map with bus positions

Alerts when count exceeds threshold (visual + sound).

Update values every few seconds using Socket.io or WebSocket.

Architecture Overview Page

Visual flow: Camera → AI Model → Data Integration → Dashboard → Alert System.

Add hover effects explaining each module.

Team & Guide Section

Cards for team members:

Apeksha S [1MP23AD003]

Hima Gowda N [1MP23AD016]

Ramya R [1MP23AD042]

Sohan M [1MP22AD048]

Guide: Mamatha V Jadhav, Assistant Professor, Dept. of AI & DS, BGSCET.

Design & UI

Modern, futuristic AI style: dark background with blue/violet neon gradients.

Smooth animations and transitions (Framer-Motion or CSS).

Responsive layout for mobile and desktop.

Navigation links: Home • System • Dashboard • Team • References.

🧩 Tech Stack

Backend: Python Flask (serves YOLOv8 results + GPS data)

AI Model: Ultralytics YOLOv8 Nano (yolov8n.pt)

Frontend: React.js or HTML/CSS/JS (Replit should auto-choose React)

Visualization: Chart.js + Leaflet.js

Communication: WebSocket / Socket.io for live updates

🧮 Logic

Backend detects people via YOLOv8 and emits the live count.

Simulate 3–5 vehicles with random or preset GPS coordinates.

Each vehicle’s crowd density updates dynamically.

Alert triggers when passenger count > threshold (e.g., 50).

📦 Project Structure (expected)
ai-transit-alerts/
├── backend/
│   ├── app.py          # Flask app with YOLO + GPS simulation
│   ├── yolov8_model.py # loads YOLOv8 and runs detection
│   ├── data/
│   │   └── tickets.csv
├── frontend/
│   ├── src/
│   │   ├── App.jsx
│   │   ├── components/
│   │   │   ├── WebcamView.jsx
│   │   │   ├── MapView.jsx
│   │   │   ├── Dashboard.jsx
│   │   │   └── Alerts.jsx
│   └── public/
│       └── index.html
└── README.md

🧠 Output Expectation

Functional full-stack app that can run directly on Replit.

Clicking “Open Webcam” starts detection.

Map shows moving buses with crowd data.

Dashboard updates in real time.

Alert pops up when overcrowded.

Attractive UI suitable for college project presentation.

Make sure the generated project includes setup instructions and is runnable directly in Replit.